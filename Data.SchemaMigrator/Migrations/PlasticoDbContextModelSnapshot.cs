// <auto-generated />
using System;
using System.Collections;
using Data.SchemaMigrator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.SchemaMigrator.Migrations
{
    [DbContext(typeof(PlasticoDbContext))]
    partial class PlasticoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:pg_buffercache", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pg_stat_statements", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:pgcrypto", ",,")
                // .HasAnnotation("Npgsql:PostgresExtension:pgrouting", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:postgis_topology", ",,")
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Data.SchemaMigrator.Models.AiModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Version")
                        .HasColumnName("version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("model","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Basin", b =>
                {
                    b.Property<string>("BasinId")
                        .HasColumnName("basin_id")
                        .HasColumnType("text");

                    b.Property<double>("AreaSquareKm")
                        .HasColumnName("area_square_km")
                        .HasColumnType("double precision");

                    b.Property<string>("BasinName")
                        .HasColumnName("basin_name")
                        .HasColumnType("text");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("text");

                    b.Property<string>("FeatureCollection")
                        .HasColumnName("feature_collection")
                        .HasColumnType("jsonb");

                    b.Property<int>("FecCount")
                        .HasColumnName("fec_count")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeomBB")
                        .HasColumnName("the_geom_bb")
                        .HasColumnType("geometry");

                    b.HasKey("BasinId");

                    b.HasIndex("AreaSquareKm");

                    b.HasIndex("TheGeomBB")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("basin","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Bi_Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("uuid");

                    b.Property<double?>("ElapsedTime")
                        .HasColumnName("elapsed_time")
                        .HasColumnType("double precision");

                    b.Property<string>("FailedStep")
                        .HasColumnName("failed_step")
                        .HasColumnType("text");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnName("finished_on")
                        .HasColumnType("date");

                    b.Property<DateTime>("InitiatedOn")
                        .HasColumnName("initiated_on")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("text");

                    b.Property<string>("ScriptVersion")
                        .HasColumnName("script_version")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("text")
                        .HasDefaultValue("HARD_FAIL");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId")
                        .HasName("IX_bi_campaign_id");

                    b.ToTable("bi","logs");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.BoundingBoxes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Height")
                        .HasColumnName("height")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdCreatorFk")
                        .HasColumnName("id_creator_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdRefImagesForLabelling")
                        .HasColumnName("id_ref_images_for_labelling")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<int>("LocationX")
                        .HasColumnName("location_x")
                        .HasColumnType("integer");

                    b.Property<int>("LocationY")
                        .HasColumnName("location_y")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnName("width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdCreatorFk")
                        .HasName("IX_bounding_boxes_IdCreatorFk");

                    b.HasIndex("IdRefImagesForLabelling");

                    b.HasIndex("IdRefTrashTypeFk")
                        .HasName("IX_bounding_boxes_IdRefTrashTypeFk");

                    b.ToTable("bounding_boxes","label");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.CampaignRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("numeric");

                    b.Property<string>("FeatureCollection")
                        .HasColumnName("feature_collection")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<int?>("TrashCount")
                        .HasColumnName("trash_count")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("TheGeom")
                        .HasName("campaign_river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("campaign_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.CampaignRiver_Bi_Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<int?>("TrashCount")
                        .HasColumnName("trash_count")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_campaign_river_id_ref_campaign_fk1");

                    b.ToTable("campaign_river","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Bi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AvgSpeed")
                        .HasColumnName("avg_speed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("EndPoint")
                        .HasColumnName("end_point")
                        .HasColumnType("geometry");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefUserFk")
                        .HasColumnName("id_ref_user_fk")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Isaidriven")
                        .HasColumnName("isaidriven")
                        .HasColumnType("boolean");

                    b.Property<string>("Locomotion")
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("StartPoint")
                        .HasColumnName("start_point")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<int?>("TrashCount")
                        .HasColumnName("trash_count")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EndPoint")
                        .HasName("campaign_end_point")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.HasIndex("Id")
                        .HasName("campaign_id");

                    b.HasIndex("StartPoint")
                        .HasName("campaign_start_point")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("campaign","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Bi_Temp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int?>("AvgSpeed")
                        .HasColumnName("avg_speed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnName("duration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("EndPoint")
                        .HasColumnName("end_point")
                        .HasColumnType("geometry");

                    b.Property<double?>("EndPointDistanceSea")
                        .HasColumnName("end_point_distance_sea")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefUserFk")
                        .HasColumnName("id_ref_user_fk")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Isaidriven")
                        .HasColumnName("isaidriven")
                        .HasColumnType("boolean");

                    b.Property<string>("Locomotion")
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Geometry>("StartPoint")
                        .HasColumnName("start_point")
                        .HasColumnType("geometry");

                    b.Property<double?>("StartPointDistanceSea")
                        .HasColumnName("start_point_distance_sea")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<int?>("TrashCount")
                        .HasColumnName("trash_count")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("campaign","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("HasBeenComputed")
                        .HasColumnName("has_been_computed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefUserFk")
                        .HasColumnName("id_ref_user_fk")
                        .HasColumnType("uuid");

                    b.Property<bool?>("Isaidriven")
                        .HasColumnName("isaidriven")
                        .HasColumnType("boolean");

                    b.Property<string>("Locomotion")
                        .IsRequired()
                        .HasColumnName("locomotion")
                        .HasColumnType("text");

                    b.Property<string>("Remark")
                        .HasColumnName("remark")
                        .HasColumnType("text");

                    b.Property<string>("Riverside")
                        .HasColumnName("riverside")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("campaign_id");

                    b.HasIndex("IdRefModelFk");

                    b.HasIndex("IdRefUserFk");

                    b.ToTable("campaign","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FeatureCollection")
                        .HasColumnName("feature_collection")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("country_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("country_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("country_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("country","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefStateFk")
                        .HasColumnName("id_ref_state_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("referential_department_code");

                    b.HasIndex("IdRefStateFk");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("department_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("referential_department_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("department","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Etl_Log", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Container")
                        .HasColumnName("container")
                        .HasColumnType("text");

                    b.Property<double?>("ElapsedTime")
                        .HasColumnName("elapsed_time")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("FinishedOn")
                        .HasColumnName("finished_on")
                        .HasColumnType("date");

                    b.Property<DateTime>("InitiatedOn")
                        .HasColumnName("initiated_on")
                        .HasColumnType("date");

                    b.Property<Guid>("MediaId")
                        .HasColumnName("media_id")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaName")
                        .IsRequired()
                        .HasColumnName("media_name")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("text");

                    b.Property<string>("ScriptVersion")
                        .HasColumnName("script_version")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("text")
                        .HasDefaultValue("HARD_FAIL");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("MediaId")
                        .HasName("IX_etl_media_id");

                    b.ToTable("etl","logs");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.ImagesForLabelling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("BlobName")
                        .HasColumnName("blob_name")
                        .HasColumnType("text");

                    b.Property<string>("ContainerUrl")
                        .HasColumnName("container_url")
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .HasColumnName("context")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<Guid>("IdCreatorFk")
                        .HasColumnName("id_creator_fk")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageQuality")
                        .HasColumnName("image_quality")
                        .HasColumnType("text");

                    b.Property<string>("View")
                        .HasColumnName("view")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdCreatorFk")
                        .HasName("IX_images_for_labelling_IdCreatorFk");

                    b.ToTable("images_for_labelling","label");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.LimitsLandSea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("TheGeom")
                        .HasName("limits_land_sea_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("limits_land_sea","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("BlobUrl")
                        .IsRequired()
                        .HasColumnName("blob_url")
                        .HasColumnType("text");

                    b.Property<string>("Createdby")
                        .IsRequired()
                        .HasColumnName("createdby")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefTrajectoryPointsFk")
                        .HasColumnName("id_ref_trajectory_points_fk")
                        .HasColumnType("uuid");

                    b.Property<BitArray>("Isdeleted")
                        .IsRequired()
                        .HasColumnName("isdeleted")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("IdRefTrajectoryPointsFk");

                    b.ToTable("media","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Municipality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefDepartmentFk")
                        .HasColumnName("id_ref_department_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("municipality_code");

                    b.HasIndex("IdRefDepartmentFk");

                    b.HasIndex("TheGeom")
                        .HasName("municipality_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("municipality","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Pipelines", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool?>("CampaignHasBeenComputed")
                        .HasColumnName("campaign_has_been_computed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CampaignId")
                        .HasColumnName("campaign_id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("RiverHasBeenComputed")
                        .HasColumnName("river_has_been_computed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("pipelines","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.River_Bi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("CountTrash")
                        .HasColumnName("count_trash")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("DistanceMonitored")
                        .HasColumnName("distance_monitored")
                        .HasColumnType("double precision");

                    b.Property<string>("FeatureCollection")
                        .HasColumnName("feature_collection")
                        .HasColumnType("jsonb");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("NbCampaign")
                        .HasColumnName("nb_campaign")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeomMonitored")
                        .HasColumnName("the_geom_monitored")
                        .HasColumnType("geometry");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("river_id");

                    b.HasIndex("Importance")
                        .HasName("river_bi_importance");

                    b.HasIndex("TheGeom")
                        .HasName("river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.River_Bi_Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("CountTrash")
                        .HasColumnName("count_trash")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("DistanceMonitored")
                        .HasColumnName("distance_monitored")
                        .HasColumnType("double precision");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<int?>("NbCampaign")
                        .HasColumnName("nb_campaign")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeomMonitored")
                        .HasColumnName("the_geom_monitored")
                        .HasColumnType("geometry");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("bi_temp_river_id");

                    b.ToTable("river","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.River_Referential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<string>("Length")
                        .HasColumnName("length")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("river_id");

                    b.HasIndex("Importance")
                        .HasName("river_importance");

                    b.HasIndex("TheGeom")
                        .HasName("river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("river","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Segment_Bi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("CountTrash")
                        .HasColumnName("count_trash")
                        .HasColumnType("double precision");

                    b.Property<double?>("CountTrashRiver")
                        .HasColumnName("count_trash_river")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("DistanceMonitored")
                        .HasColumnName("distance_monitored")
                        .HasColumnType("double precision");

                    b.Property<double?>("DistanceMonitoredRiver")
                        .HasColumnName("distance_monitored_river")
                        .HasColumnType("double precision");

                    b.Property<string>("FeatureCollection")
                        .HasColumnName("feature_collection")
                        .HasColumnType("jsonb");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<int?>("NbCampaign")
                        .HasColumnName("nb_campaign")
                        .HasColumnType("integer");

                    b.Property<int?>("NbCampaignRiver")
                        .HasColumnName("nb_campaign_river")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeomMonitored")
                        .HasColumnName("the_geom_monitored")
                        .HasColumnType("geometry");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TrashPerKmRiver")
                        .HasColumnName("trash_per_km_river")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("bi_segment_id");

                    b.HasIndex("Importance")
                        .HasName("bi_segment_importance");

                    b.HasIndex("TheGeom")
                        .HasName("segment_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("segment","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Segment_Bi_Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double?>("CountTrash")
                        .HasColumnName("count_trash")
                        .HasColumnType("double precision");

                    b.Property<double?>("CountTrashRiver")
                        .HasColumnName("count_trash_river")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("DistanceMonitored")
                        .HasColumnName("distance_monitored")
                        .HasColumnType("double precision");

                    b.Property<double?>("DistanceMonitoredRiver")
                        .HasColumnName("distance_monitored_river")
                        .HasColumnType("double precision");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<int?>("NbCampaign")
                        .HasColumnName("nb_campaign")
                        .HasColumnType("integer");

                    b.Property<int?>("NbCampaignRiver")
                        .HasColumnName("nb_campaign_river")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<Geometry>("TheGeomMonitored")
                        .HasColumnName("the_geom_monitored")
                        .HasColumnType("geometry");

                    b.Property<decimal?>("TrashPerKm")
                        .HasColumnName("trash_per_km")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("TrashPerKmRiver")
                        .HasColumnName("trash_per_km_river")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("bi_temp_segment_id");

                    b.ToTable("segment","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Segment_Referential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Bras")
                        .HasColumnName("bras")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<string>("CodeHydro")
                        .HasColumnName("code_hydro")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<int?>("Importance")
                        .HasColumnName("importance")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Length")
                        .HasColumnName("length")
                        .HasColumnType("numeric");

                    b.Property<string>("Nature")
                        .HasColumnName("nature")
                        .HasColumnType("text");

                    b.Property<string>("Origine")
                        .HasColumnName("origine")
                        .HasColumnType("text");

                    b.Property<int?>("StrahlerRank")
                        .HasColumnName("strahler_rank")
                        .HasColumnType("integer");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("segment_id");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("IdRefRiverFk");

                    b.HasIndex("Importance")
                        .HasName("segment_importance");

                    b.HasIndex("TheGeom")
                        .HasName("segment_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("segment","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnName("code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IdRefCountryFk")
                        .HasColumnName("id_ref_country_fk")
                        .HasColumnType("integer");

                    b.Property<string>("IdSource")
                        .HasColumnName("id_source")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .IsRequired()
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .HasName("state_code");

                    b.HasIndex("IdRefCountryFk");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("state_name_key");

                    b.HasIndex("TheGeom")
                        .HasName("state_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("state","referential");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Test", b =>
                {
                    b.Property<int?>("B")
                        .HasColumnName("b")
                        .HasColumnType("integer");

                    b.ToTable("test");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Test2", b =>
                {
                    b.Property<string>("B")
                        .HasColumnName("b")
                        .HasColumnType("text");

                    b.ToTable("test2");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPointRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<int>("IdRefSegmentFk")
                        .HasColumnName("id_ref_segment_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrajectoryPointFk")
                        .HasColumnName("id_ref_trajectory_point_fk")
                        .HasColumnType("uuid");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.ToTable("trajectory_point_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPointRiver_Bi_Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<int>("IdRefSegmentFk")
                        .HasColumnName("id_ref_segment_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrajectoryPointFk")
                        .HasColumnName("id_ref_trajectory_point_fk")
                        .HasColumnType("uuid");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_trajectory_point_river_id_ref_campaign_fk1");

                    b.HasIndex("IdRefRiverFk");

                    b.ToTable("trajectory_point_river","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Bi", b =>
                {
                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("TimeDiff")
                        .HasColumnName("time_diff")
                        .HasColumnType("interval");

                    b.HasIndex("IdRefCampaignFk");

                    b.ToTable("trajectory_point","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Bi_Temp", b =>
                {
                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Distance")
                        .HasColumnName("distance")
                        .HasColumnType("double precision");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("TimeDiff")
                        .HasColumnName("time_diff")
                        .HasColumnType("interval");

                    b.HasIndex("Id");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_trajectory_point_id_ref_campaign_fk1");

                    b.ToTable("trajectory_point","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("Speed")
                        .HasColumnName("speed")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_trajectory_point_id_ref_campaign_fk2");

                    b.HasIndex("TheGeom")
                        .HasName("trajectory_point_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trajectory_point","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrashRiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FeatureCollection")
                        .HasColumnName("feature_collection")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<int>("IdRefSegmentFk")
                        .HasColumnName("id_ref_segment_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrashFk")
                        .HasColumnName("id_ref_trash_fk")
                        .HasColumnType("uuid");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("IdRefTrashFk");

                    b.HasIndex("TheGeom")
                        .HasName("trash_river_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trash_river","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrashRiver_Bi_Temp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefRiverFk")
                        .HasColumnName("id_ref_river_fk")
                        .HasColumnType("integer");

                    b.Property<int>("IdRefSegmentFk")
                        .HasColumnName("id_ref_segment_fk")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRefTrashFk")
                        .HasColumnName("id_ref_trash_fk")
                        .HasColumnType("uuid");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IX_trash_river_id1");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_trash_river_id_ref_campaign_fk1");

                    b.HasIndex("IdRefRiverFk");

                    b.HasIndex("IdRefSegmentFk");

                    b.ToTable("trash_river","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrashType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("trash_type","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Bi", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentCode")
                        .HasColumnName("department_code")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name")
                        .HasColumnType("text");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefImageFk")
                        .HasColumnName("id_ref_image_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnName("municipality_code")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityName")
                        .HasColumnName("municipality_name")
                        .HasColumnType("text");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<string>("StateCode")
                        .HasColumnName("state_code")
                        .HasColumnType("text");

                    b.Property<string>("StateName")
                        .HasColumnName("state_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IdRefCampaignFk");

                    b.HasIndex("TheGeom")
                        .HasName("bi_trash_the_geom");

                    b.ToTable("trash","bi");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Bi_Temp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CountryCode")
                        .HasColumnName("country_code")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .HasColumnName("country_name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DepartmentCode")
                        .HasColumnName("department_code")
                        .HasColumnType("text");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name")
                        .HasColumnType("text");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefImageFk")
                        .HasColumnName("id_ref_media_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Lat")
                        .HasColumnName("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Lon")
                        .HasColumnName("lon")
                        .HasColumnType("double precision");

                    b.Property<string>("MunicipalityCode")
                        .HasColumnName("municipality_code")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityName")
                        .HasColumnName("municipality_name")
                        .HasColumnType("text");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<string>("StateCode")
                        .HasColumnName("state_code")
                        .HasColumnType("text");

                    b.Property<string>("StateName")
                        .HasColumnName("state_name")
                        .HasColumnType("text");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .HasName("IX_trash_id1");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_trash_id_ref_campaign_fk1");

                    b.HasIndex("TheGeom")
                        .HasName("bi_trash_the_geom");

                    b.ToTable("trash","bi_temp");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double?>("Elevation")
                        .HasColumnName("elevation")
                        .HasColumnType("double precision");

                    b.Property<string>("Frame2Box")
                        .HasColumnName("frame_2_box")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("IdRefCampaignFk")
                        .HasColumnName("id_ref_campaign_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefImageFk")
                        .HasColumnName("id_ref_image_fk")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("IdRefModelFk")
                        .HasColumnName("id_ref_model_fk")
                        .HasColumnType("uuid");

                    b.Property<int>("IdRefTrashTypeFk")
                        .HasColumnName("id_ref_trash_type_fk")
                        .HasColumnType("integer");

                    b.Property<double?>("Precision")
                        .HasColumnName("precision")
                        .HasColumnType("double precision");

                    b.Property<Geometry>("TheGeom")
                        .HasColumnName("the_geom")
                        .HasColumnType("geometry");

                    b.Property<DateTime?>("Time")
                        .HasColumnName("time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdRefCampaignFk")
                        .HasName("IX_trash_id_ref_campaign_fk2");

                    b.HasIndex("IdRefImageFk");

                    b.HasIndex("IdRefModelFk");

                    b.HasIndex("IdRefTrashTypeFk");

                    b.HasIndex("TheGeom")
                        .HasName("trash_the_geom")
                        .HasAnnotation("Npgsql:IndexMethod", "gist");

                    b.ToTable("trash","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime?>("Createdon")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("text");

                    b.Property<bool>("Emailconfirmed")
                        .HasColumnName("emailconfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Experience")
                        .HasColumnName("experience")
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname")
                        .HasColumnType("text");

                    b.Property<bool>("Isdeleted")
                        .HasColumnName("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoggedOn")
                        .HasColumnName("lastloggedon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname")
                        .HasColumnType("text");

                    b.Property<string>("Nickname")
                        .HasColumnName("nickname")
                        .HasColumnType("text");

                    b.Property<string>("Passwordhash")
                        .HasColumnName("passwordhash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Yearofbirth")
                        .HasColumnName("yearofbirth")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("Firstname")
                        .HasName("user_firstname");

                    b.HasIndex("Lastname")
                        .HasName("user_lastname");

                    b.ToTable("user","campaign");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.BoundingBoxes", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.ImagesForLabelling", "ImageForLabelling")
                        .WithMany("ImagesForLabellingBoundingBoxesNavigation")
                        .HasForeignKey("IdRefImagesForLabelling")
                        .HasConstraintName("id_ref_images_for_labelling_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Campaign_Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.AiModel", "IdRefModelFkNavigation")
                        .WithMany("Campaigns_Campaign")
                        .HasForeignKey("IdRefModelFk")
                        .HasConstraintName("campaign_id_ref_model_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.User", "IdRefUserFkNavigation")
                        .WithMany("Campaigns_Campaign")
                        .HasForeignKey("IdRefUserFk")
                        .HasConstraintName("campaign_id_ref_user_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Department", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.State", "IdRefStateFkNavigation")
                        .WithMany("Department")
                        .HasForeignKey("IdRefStateFk")
                        .HasConstraintName("department_id_ref_state_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Etl_Log", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "EtlLogs_Campaign_CampaignFKNavigation")
                        .WithMany("Etl_Logs")
                        .HasForeignKey("CampaignId")
                        .HasConstraintName("fk_campaign_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.LimitsLandSea", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Country", "IdRefCountryFkNavigation")
                        .WithMany("LimitsLandSea")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("limits_land_sea_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Media", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("Image")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("image_id_ref_campaign_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.TrajectoryPoint_Campaign", "IdRefTrajectoryPointsFkNavigation")
                        .WithMany("Image")
                        .HasForeignKey("IdRefTrajectoryPointsFk")
                        .HasConstraintName("image_id_ref_trajectory_points_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Municipality", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Department", "IdRefDepartmentFkNavigation")
                        .WithMany("Municipality")
                        .HasForeignKey("IdRefDepartmentFk")
                        .HasConstraintName("municipality_id_ref_department_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Segment_Referential", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Country", "IdRefCountryFkNavigation")
                        .WithMany("Segment")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("segment_id_ref_country_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.River_Referential", "IdRefRiverFkNavigation")
                        .WithMany("Segment")
                        .HasForeignKey("IdRefRiverFk")
                        .HasConstraintName("segment_id_ref_river_fk_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.State", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Country", "IdRefCountryFkNavigation")
                        .WithMany("State")
                        .HasForeignKey("IdRefCountryFk")
                        .HasConstraintName("state_id_ref_country_fk_fkey");
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.TrajectoryPoint_Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("TrajectoryPoints_Campaign")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("trajectory_point_id_ref_campaign_fk_fkey")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.SchemaMigrator.Models.Trash_Campaign", b =>
                {
                    b.HasOne("Data.SchemaMigrator.Models.Campaign_Campaign", "IdRefCampaignFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefCampaignFk")
                        .HasConstraintName("trash_id_ref_campaign_fk_fkey")
                        .IsRequired();

                    b.HasOne("Data.SchemaMigrator.Models.Media", "IdRefImageFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefImageFk")
                        .HasConstraintName("trash_id_ref_image_fk_fkey");

                    b.HasOne("Data.SchemaMigrator.Models.AiModel", "IdRefModelFkNavigation")
                        .WithMany("Trash1")
                        .HasForeignKey("IdRefModelFk")
                        .HasConstraintName("trash_id_ref_model_fk_fkey");
                });
#pragma warning restore 612, 618
        }
    }
}
